#! /bin/sh
### BEGIN INIT INFO
# Provides:		  xo
# Required-Start:	$all
# Required-Stop:	 $local_fs $remote_fs $syslog $named $network
# Default-Start:	 2 3 4 5
# Default-Stop:	  0 1 6
# Short-Description: start and stop XO server
# Description:	   XO is a web gui for XAPI hosts
### END INIT INFO

# Author: Julien Fontanet <julien.fontanet@vates.fr>

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/usr/local/bin:/sbin:/usr/sbin:/bin:/usr/bin
DESC='Xen Orchestra'
NAME='xo'
DAEMON='/root/xo-server/xo-server'
DAEMON_ARGS=''
PIDFILE="/var/run/$NAME.pid"
SCRIPTNAME="/etc/init.d/$NAME"
LOGFILE="/var/log/$NAME"

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/"$NAME" ] && . /etc/default/"$NAME"

# Load the VERBOSE setting and other rcS variables
#. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

_is_running()
{
	local pid

	[ -f "$PIDFILE" ] || return 1

	pid=$(cat "$PIDFILE")
	kill -0 "$pid" 2> /dev/null >&2
}

# _wait_for <cmd> [<timeout>]
_wait_for()
{
	local i

	if [ $# -eq 2 ]
	then
		i=$2
	else
		i=-1
	fi

	while [ "$i" -ne 0 ]
	do
		if $cmd
		then
			return
		fi
		sleep 1
	done

	return 1
}

#
# Function that starts the daemon/service
#
# Return
#   0 if daemon has been started
#   1 if daemon was already running
#   2 if daemon could not be started
do_start()
{
	local pid

	_is_running && return 1

	printf '%s\n' '' \
		'----------------------------------------' \
		"$(date +'%Y-%m-%d %H:%M:%S')" \
		'----------------------------------------' >> "$LOGFILE"

	_daemon() { "$DAEMON" $DAEMON_ARGS 2>> "$LOGFILE" >&2 & }
	if ! _daemon
	then
		echo "$?"
		return 2
	fi

	pid=$!
	echo "$pid" > "$PIDFILE"
}

#
# Function that stops the daemon/service
#
# Return
#   0 if daemon has been stopped
#   1 if daemon was already stopped
#   2 if daemon could not be stopped
#   other if a failure occurred
do_stop()
{
	local pid

	_is_running || return 1

	pid=$(cat "$PIDFILE")
	_terminated() { ! kill -0 "$pid"; }

	kill "$pid"
	_wait_for _terminated 30 && return

	kill -KILL 15 "$pid"
	_wait_for _terminated 15 || return 2
}

#
# Function that sends a SIGHUP to the daemon/service
#
# Return
#   0 if daemon has been reloaded
#   1 if daemon was stopped
do_reload()
{
	local pid

	_is_running || return 1

	pid=$(cat "$PIDFILE")
	kill -HUP "$pid"
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	RETVAL=$?
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
	if _is_running
	then
		log_success_msg "$NAME is running"
	else
		log_failure_msg "$NAME is not running"
	fi
	;;
  #reload|force-reload)
	#
	# If do_reload() is not implemented then leave this commented out
	# and leave 'force-reload' as an alias for 'restart'.
	#
	#log_daemon_msg "Reloading $DESC" "$NAME"
	#do_reload
	#log_end_msg $?
	#;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
		# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  'update')
	log_daemon_msg 'Updating XOA init script'
	if (cd /root/xoa-init-script && git pull --quiet --ff-only)
	then
		log_end_msg 0
	else
		log_end_msg 1
	fi

	log_daemon_msg 'Updating XO-Server'
	if (cd /root/xo-server && git pull --quiet --ff-only && HOME=/tmp echo npm ${http_proxy:+--proxy="$http_proxy"} ${https_proxy:+--https-proxy="$https_proxy"} install --loglevel error)
	then
		log_end_msg 0
	else
		log_end_msg 1
	fi

	log_daemon_msg 'Updating XO-Web'
	if (cd /root/xo-web && git pull --quiet --ff-only)
	then
		log_end_msg 0
	else
		log_end_msg 1
	fi
	;;
  *)
	#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac
